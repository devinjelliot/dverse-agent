// This file is the main page of the chatbot demo. 
// It uses the @ably-labs/react-hooks package to subscribe to the Ably channel for the current user and update the conversation state accordingly. 
// It also uses the @fingerprintjs/fingerprintjs-pro-react package to get the visitor ID for the current user.
// The visitor ID is used to identify the user in the Ably channel.
// The chatbot demo uses the @chatscope/chat-ui-kit-react package to render the chat UI.
// The chatbot demo uses the @chatscope/chat-ui-kit-styles package to style the chat UI.
// The chatbot demo uses the timeago.js package to format the timestamps of the messages.
// The chatbot demo uses the ReactMarkdown package to render the markdown responses from the chatbot.
// src/pages/index.tsx
import Head from "next/head";
import { useState } from "react";
import { useVisitorData } from "@fingerprintjs/fingerprintjs-pro-react";
import ReactMarkdown from "react-markdown";
import * as timeago from "timeago.js";
import "tailwindcss/tailwind.css";
import Navbar from '../components/navbar';
import InputBox from "../components/inputBox";
import OutputBox from "../components/outputBox";

import {
  MainContainer,
  ChatContainer,
  MessageList,
  Message,
  MessageInput,
  ConversationHeader,
  TypingIndicator,
} from "@chatscope/chat-ui-kit-react";

import styles from "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";
import { useChannel } from "@ably-labs/react-hooks";
import { Types } from "ably";
import WordGraph from "components/wordGraph";
import { dummyGraph } from "models/wordGraph";

type ConversationEntry = {
  message: string;
  speaker: "bot" | "user";
  date: Date;
  id?: string;
};

type request = {
  prompt: string;
};


const updateChatbotMessage = (
  conversation: ConversationEntry[],
  message: Types.Message
): ConversationEntry[] => {
  const interactionId = message.data.interactionId;

  const updatedConversation = conversation.reduce(
    (acc: ConversationEntry[], e: ConversationEntry) => [
      ...acc,
      e.id === interactionId
        ? { ...e, message: e.message + message.data.token }
        : e,
    ],
    []
  );

  return conversation.some((e) => e.id === interactionId)
    ? updatedConversation
    : [
        ...updatedConversation,
        {
          id: interactionId,
          message: message.data.token,
          speaker: "bot",
          date: new Date(),
        },
      ];
};

export default function Home() {
  const [text, setText] = useState("");
  const [extendedResult, updateExtendedResult] = useState(false);
  const [conversation, setConversation] = useState<ConversationEntry[]>([]);
  const [botIsTyping, setBotIsTyping] = useState(false);
  const [statusMessage, setStatusMessage] = useState("Waiting for query...");

  const { isLoading, data: visitorData } = useVisitorData(
    { extendedResult },
    { immediate: true }
  );

  useChannel(visitorData?.visitorId! || "default", (message) => {
    switch (message.data.event) {
      case "response":
        setConversation((state) => updateChatbotMessage(state, message));
        break;
      case "status":
        setStatusMessage(message.data.message);
        break;
      case "responseEnd":
      default:
        setBotIsTyping(false);
        setStatusMessage("Waiting for query...");
    }
  });

  const submit = async () => {
    setConversation((state) => [
      ...state,
      {
        message: text,
        speaker: "user",
        date: new Date(),
      },
    ]);
    try {
      setBotIsTyping(true);
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt: text, userId: visitorData?.visitorId }),
      });

      await response.json();
    } catch (error) {
      console.error("Error submitting message:", error);
    } finally {
      setBotIsTyping(false);
    }
    setText("");
  };

  return (
    <>
      <Navbar />
      <Head>
        <title>Chat with Backpack Knowledge Base</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <main className="radial-gradient-bg min-h-screen flex flex-col justify-end pb-12">
        <div className="absolute inset-0 flex items-center justify-center">
            <WordGraph data={dummyGraph} />
          </div>
          <OutputBox
            botIsTyping={botIsTyping}
            statusMessage={statusMessage}
            conversation={conversation}
          />
          <InputBox
            onSend={submit}
            onChange={(e, text) => {
              setText(text);
            }}
            isLoading={isLoading}
          />
        </main>
    </>
  );
}
